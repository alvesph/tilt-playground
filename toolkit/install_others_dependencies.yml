---
- hosts: local
  become: yes
  tasks:
    # Validação e instalação do Tilt
    - name: Check if Tilt is installed
      command: tilt version
      register: tilt_version
      ignore_errors: true

    - name: Install Tilt
      shell: curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
      args:
        executable: /bin/bash
      when: tilt_version.rc != 0 
      tags:
        - tilt
        - system

    - name: Print Tilt version
      debug:
        msg: "Tilt version: {{ tilt_version.stdout }}"
      when: tilt_version.rc == 0 

    # Validação e instalação do k3d
    - name: Check if k3d is installed
      command: k3d version
      register: k3d_version
      ignore_errors: true 

    - name: Install k3d via curl
      shell: curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      args:
        executable: /bin/bash
      when: k3d_version.rc != 0 
      tags:
        - k3d
        - system

    - name: Print k3d version
      debug:
        msg: "k3d version: {{ k3d_version.stdout }}"
      when: k3d_version.rc == 0

    # Download e execução do script de instalação do Helm
    - name: Check if helm is installed
      command: helm version
      register: helm_version
      ignore_errors: true 

    - name: Download get_helm.sh script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get_helm.sh
      args:
        executable: /bin/bash
      when: helm_version.rc != 0 
      tags:
        - helm
        - system

    - name: Set execute permissions on get_helm.sh
      file:
        path: /tmp/get_helm.sh
        mode: '0700'
      args:
        executable: /bin/bash
      when: helm_version.rc != 0 
      tags:
        - helm
        - system

    - name: Run get_helm.sh script
      shell: /tmp/get_helm.sh
      args:
        executable: /bin/bash
      when: helm_version.rc != 0 
      tags:
        - helm
        - system

    - name: Print helm version
      debug:
        msg: "helm version: {{ helm_version.stdout }}"
      when: helm_version.rc == 0

    # Instalação do Docker
    - name: Check if docker is installed
      command: docker --version
      register: docker_version
      ignore_errors: true 

    - name: Atualizar cache de pacotes apt
      apt:
        update_cache: yes
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - docker
        - system

    - name: Instalar pacotes necessários para adicionar repositórios
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - docker
        - system

    - name: Adicionar chave GPG oficial do Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.asc
        state: present
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - docker
        - system

    - name: Adicionar repositório Docker
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - docker
        - system

    - name: Atualizar cache de pacotes apt novamente
      apt:
        update_cache: yes
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - docker
        - system

    - name: Instalar Docker
      apt:
        name: docker-ce
        state: present
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - docker
        - system

    - name: Iniciar e habilitar o serviço Docker
      systemd:
        name: docker
        enabled: yes
        state: started
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - docker
        - system

    - name: Adicionar o usuário atual ao grupo Docker
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - docker
        - system

    - name: Print docker version
      debug:
        msg: "docker version: {{ docker_version.stdout }}"
      when: docker_version.rc == 0

    # Instalação do kubectl
    - name: Check if kubectl is installed
      command: kubectl version
      register: kubectl_version
      ignore_errors: true 

    - name: Adicionar chave GPG do kubectl
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - kubectl
        - system

    - name: Adicionar repositório do kubectl
      apt_repository:
        repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - kubectl
        - system

    - name: Atualizar cache de pacotes apt
      apt:
        update_cache: yes
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - kubectl
        - system

    - name: Instalar kubectl
      apt:
        name: kubectl
        state: present
      args:
        executable: /bin/bash
      when: docker_version.rc != 0 
      tags:
        - kubectl
        - system

    - name: Print kubectl version
      debug:
        msg: "kubectl version: {{ kubectl_version.stdout }}"
      when: kubectl_version.rc == 0